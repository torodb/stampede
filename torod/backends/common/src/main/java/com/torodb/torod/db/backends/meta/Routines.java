/*
 *     This file is part of ToroDB.
 *
 *     ToroDB is free software: you can redistribute it and/or modify
 *     it under the terms of the GNU Affero General Public License as published by
 *     the Free Software Foundation, either version 3 of the License, or
 *     (at your option) any later version.
 *
 *     ToroDB is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *     GNU Affero General Public License for more details.
 *
 *     You should have received a copy of the GNU Affero General Public License
 *     along with ToroDB. If not, see <http://www.gnu.org/licenses/>.
 *
 *     Copyright (c) 2014, 8Kdata Technology
 *     
 */

package com.torodb.torod.db.backends.meta;

import javax.annotation.Nonnull;

import org.jooq.Configuration;

import com.google.common.collect.Multimap;
import com.torodb.torod.core.connection.exceptions.RetryTransactionException;
import com.torodb.torod.core.subdocument.structure.DocStructure;
import com.torodb.torod.db.backends.DatabaseInterface;
import com.torodb.torod.db.backends.meta.routines.DeleteDocuments;
import com.torodb.torod.db.backends.meta.routines.DropCollection;
import com.torodb.torod.db.backends.meta.routines.FirstFreeDocId;
import com.torodb.torod.db.backends.meta.routines.ReserveDocIds;

/**
 * This class is generated by jOOQ.
 * <p>
 * Convenience access to all stored procedures and functions in public
 */
@javax.annotation.Generated(value = {"http://www.jooq.org", "3.3.2"},
        comments = "This class is generated by jOOQ")
@java.lang.SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Routines {

    /**
     * Call <code>torodb.first_free_value_type_id</code>
     * @param configuration
     * @param colSchema
     * @return 
     */
    public static Integer firstFreeDocId(Configuration configuration, CollectionSchema colSchema) {
        FirstFreeDocId f = new FirstFreeDocId();
        f.setColSchema(colSchema.getName());

        f.execute(configuration);
        return f.getReturnValue();
    }

    /**
     * Call <code>torodb.reserve_value_type_id</code>
     * @param configuration
     * @param colSchema 
     * @param increment
     * @return 
     */
    public static Integer reserveDocIds(Configuration configuration, CollectionSchema colSchema, Integer increment) {
        ReserveDocIds f = new ReserveDocIds();
        f.setColSchema(colSchema);
        f.setIncrement(increment);

        f.execute(configuration);
        return f.getReturnValue();
    }

    public static int deleteDocuments(
            Configuration configuration, CollectionSchema colSchema, Multimap<DocStructure, Integer> didsByStructure,
            boolean justOne, @Nonnull DatabaseInterface databaseInterface
    ) throws RetryTransactionException {
        return DeleteDocuments.execute(configuration, colSchema, didsByStructure, justOne, databaseInterface);
    }

    public static void dropCollection(
            Configuration jooqConf, CollectionSchema colSchema, @Nonnull DatabaseInterface databaseInterface
    ) {
        DropCollection.execute(jooqConf, colSchema, databaseInterface);
    }
}
